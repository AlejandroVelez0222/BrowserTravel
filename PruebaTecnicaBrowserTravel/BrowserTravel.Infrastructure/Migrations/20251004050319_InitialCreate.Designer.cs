// <auto-generated />
using System;
using BrowserTravel.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrowserTravel.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004050319_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BrowserTravel.Core.Domain.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CardPlateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("double");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardPlateId")
                        .IsUnique();

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31092cfc-ba1a-426c-8697-80684e113458"),
                            Brand = "Toyota",
                            CardPlateId = "ABC123",
                            Category = "Sedan",
                            Market = "LATAM",
                            Model = "Corolla",
                            PricePerDay = 150000.0,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("06f03e74-6df8-4dbf-8c5c-409312d10d50"),
                            Brand = "Mazda",
                            CardPlateId = "XYZ789",
                            Category = "SUV",
                            Market = "LATAM",
                            Model = "CX-5",
                            PricePerDay = 220000.0,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("4b43397e-e400-4383-b890-88888dd78445"),
                            Brand = "Chevrolet",
                            CardPlateId = "JKL456",
                            Category = "Hatchback",
                            Market = "LATAM",
                            Model = "Spark GT",
                            PricePerDay = 120000.0,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("7d70a7eb-3502-4612-a06c-3db59820a6ea"),
                            Brand = "Ford",
                            CardPlateId = "QWE321",
                            Category = "Pickup",
                            Market = "LATAM",
                            Model = "Ranger",
                            PricePerDay = 300000.0,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.VehicleLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CardPlateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CardPlateId");

                    b.ToTable("VehicleLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c37b3f1a-c0f9-4d69-93c4-bd097d2a5118"),
                            CardPlateId = "ABC123",
                            IsAvailable = true,
                            Location = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("e37a9aed-e225-4d7f-ae44-3c3e693a3270"),
                            CardPlateId = "ABC123",
                            IsAvailable = true,
                            Location = "Medellín"
                        },
                        new
                        {
                            Id = new Guid("456d8f5a-a81a-4dc7-bd81-d215123d2c1a"),
                            CardPlateId = "XYZ789",
                            IsAvailable = false,
                            Location = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("5dd7a6ba-e33d-4ecf-91b6-51012c4aa821"),
                            CardPlateId = "XYZ789",
                            IsAvailable = true,
                            Location = "Cartagena"
                        },
                        new
                        {
                            Id = new Guid("78fbe1db-73d4-427c-8eb7-709d82e48cc5"),
                            CardPlateId = "JKL456",
                            IsAvailable = true,
                            Location = "Medellín"
                        },
                        new
                        {
                            Id = new Guid("43bfda21-fb01-4d9c-9cf4-f8450e276ab4"),
                            CardPlateId = "JKL456",
                            IsAvailable = false,
                            Location = "Cali"
                        },
                        new
                        {
                            Id = new Guid("6726b0eb-1f58-447e-803e-a780fde26e7f"),
                            CardPlateId = "QWE321",
                            IsAvailable = true,
                            Location = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("8dad1da3-6788-4616-9158-4be7f19f92c4"),
                            CardPlateId = "QWE321",
                            IsAvailable = true,
                            Location = "Barranquilla"
                        });
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.VehicleLocation", b =>
                {
                    b.HasOne("BrowserTravel.Core.Domain.Vehicle", "Vehicle")
                        .WithMany("Locations")
                        .HasForeignKey("CardPlateId")
                        .HasPrincipalKey("CardPlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Vehicle", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
