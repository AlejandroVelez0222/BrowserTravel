// <auto-generated />
using System;
using BrowserTravel.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrowserTravel.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004081405_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BrowserTravel.Core.Domain.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Markets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "LATAM"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Name = "EU"
                        });
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Rules.MarketRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RentalLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("MarketRules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CustomerLocation = "Bogotá",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RentalLocation = "Medellín"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            CustomerLocation = "Cali",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RentalLocation = "Cartagena"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            CustomerLocation = "Medellín",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RentalLocation = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            CustomerLocation = "Cartagena",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RentalLocation = "Cali"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222221"),
                            CustomerLocation = "Paris",
                            MarketId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RentalLocation = "Lyon"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CustomerLocation = "Berlin",
                            MarketId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RentalLocation = "Munich"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            CustomerLocation = "Madrid",
                            MarketId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RentalLocation = "Barcelona"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222224"),
                            CustomerLocation = "Rome",
                            MarketId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RentalLocation = "Florence"
                        });
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CardPlateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("double");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardPlateId")
                        .IsUnique();

                    b.HasIndex("MarketId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333331"),
                            Brand = "Toyota",
                            CardPlateId = "ABC123",
                            Category = "Sedan",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Model = "Corolla",
                            PricePerDay = 150000.0,
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333332"),
                            Brand = "Mazda",
                            CardPlateId = "XYZ789",
                            Category = "SUV",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Model = "CX-5",
                            PricePerDay = 220000.0,
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Brand = "Chevrolet",
                            CardPlateId = "JKL456",
                            Category = "Hatchback",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Model = "Spark GT",
                            PricePerDay = 120000.0,
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333334"),
                            Brand = "Ford",
                            CardPlateId = "QWE321",
                            Category = "Pickup",
                            MarketId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Model = "Ranger",
                            PricePerDay = 300000.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333335"),
                            Brand = "BMW",
                            CardPlateId = "LMN987",
                            Category = "SUV",
                            MarketId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Model = "X3",
                            PricePerDay = 350000.0,
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333336"),
                            Brand = "Audi",
                            CardPlateId = "OPQ654",
                            Category = "Sedan",
                            MarketId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Model = "A4",
                            PricePerDay = 300000.0,
                            Year = 2020
                        });
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.VehicleLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CardPlateId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CardPlateId");

                    b.ToTable("VehicleLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444441"),
                            CardPlateId = "ABC123",
                            IsAvailable = true,
                            Location = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444442"),
                            CardPlateId = "ABC123",
                            IsAvailable = true,
                            Location = "Medellín"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444443"),
                            CardPlateId = "XYZ789",
                            IsAvailable = false,
                            Location = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CardPlateId = "XYZ789",
                            IsAvailable = true,
                            Location = "Cartagena"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555551"),
                            CardPlateId = "JKL456",
                            IsAvailable = true,
                            Location = "Medellín"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555552"),
                            CardPlateId = "JKL456",
                            IsAvailable = false,
                            Location = "Cali"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555553"),
                            CardPlateId = "QWE321",
                            IsAvailable = true,
                            Location = "Bogotá"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555554"),
                            CardPlateId = "QWE321",
                            IsAvailable = true,
                            Location = "Barranquilla"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666661"),
                            CardPlateId = "LMN987",
                            IsAvailable = true,
                            Location = "Paris"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666662"),
                            CardPlateId = "LMN987",
                            IsAvailable = false,
                            Location = "Lyon"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666663"),
                            CardPlateId = "OPQ654",
                            IsAvailable = true,
                            Location = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666664"),
                            CardPlateId = "OPQ654",
                            IsAvailable = true,
                            Location = "Munich"
                        });
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Rules.MarketRule", b =>
                {
                    b.HasOne("BrowserTravel.Core.Domain.Market", "Market")
                        .WithMany("Rules")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Vehicle", b =>
                {
                    b.HasOne("BrowserTravel.Core.Domain.Market", "Market")
                        .WithMany("Vehicles")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.VehicleLocation", b =>
                {
                    b.HasOne("BrowserTravel.Core.Domain.Vehicle", "Vehicle")
                        .WithMany("Locations")
                        .HasForeignKey("CardPlateId")
                        .HasPrincipalKey("CardPlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Market", b =>
                {
                    b.Navigation("Rules");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BrowserTravel.Core.Domain.Vehicle", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
